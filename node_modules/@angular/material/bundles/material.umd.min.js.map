{"version":3,"file":"material.umd.min.js","sources":["../../src/material/toolbar/toolbar.ts","../../src/material/toolbar/toolbar-module.ts","../../src/material/tree/outlet.ts","../../src/material/tree/node.ts","../../src/material/tree/padding.ts","../../src/material/tree/tree.ts","../../src/material/tree/toggle.ts","../../src/material/tree/tree-module.ts","../../src/material/tree/data-source/flat-data-source.ts","../../src/material/tree/data-source/nested-data-source.ts","../../src/material/autocomplete/autocomplete-trigger.ts","../../src/material/core/month-constants.ts","../../src/material/datepicker/multi-year-view.ts","../../src/material/expansion/expansion-animations.ts","../../src/material/select/select.ts","../../src/material/tooltip/tooltip.ts","../../src/material/tabs/tab.ts","../../src/material/tabs/tabs-animations.ts","../../src/material/tabs/tab-body.ts","../../src/material/tabs/tab-label-wrapper.ts","../../src/material/tabs/tab-header.ts","../../src/material/tabs/tab-group.ts","../../src/material/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/material/tabs/tabs-module.ts","../../src/material/sort/sort-header.ts","../../src/material/sort/sort-module.ts","../../src/material/stepper/step-label.ts","../../src/material/stepper/stepper-intl.ts","../../src/material/stepper/step-header.ts","../../src/material/stepper/stepper-animations.ts","../../src/material/stepper/stepper-icon.ts","../../src/material/stepper/stepper.ts","../../src/material/stepper/stepper-button.ts","../../src/material/stepper/stepper-module.ts","../../src/material/table/table.ts","../../src/material/table/cell.ts","../../src/material/table/row.ts","../../src/material/table/text-column.ts","../../src/material/table/table-module.ts","../../src/material/table/table-data-source.ts","../../src/material/tabs/ink-bar.ts","../../src/material/tabs/tab-content.ts","../../src/material/tabs/tab-label.ts","../../src/material/slider/slider.ts","../../src/material/slider/slider-module.ts","../../src/material/snack-bar/snack-bar-ref.ts","../../src/material/snack-bar/snack-bar-config.ts","../../src/material/snack-bar/simple-snack-bar.ts","../../src/material/snack-bar/snack-bar-animations.ts","../../src/material/snack-bar/snack-bar-container.ts","../../src/material/snack-bar/snack-bar-module.ts","../../src/material/snack-bar/snack-bar.ts","../../src/material/sort/sort.ts","../../src/material/sort/sort-animations.ts","../../src/material/sort/sort-header-intl.ts","../../src/material/sidenav/drawer.ts","../../src/material/sidenav/sidenav.ts","../../src/material/sidenav/sidenav-module.ts","../../src/material/slide-toggle/slide-toggle-config.ts","../../src/material/slide-toggle/slide-toggle.ts","../../src/material/slide-toggle/slide-toggle-module.ts","../../src/material/progress-spinner/progress-spinner.ts","../../src/material/progress-spinner/progress-spinner-module.ts","../../src/material/radio/radio.ts","../../src/material/radio/radio-module.ts","../../src/material/sidenav/drawer-animations.ts","../../src/material/select/select-module.ts","../../src/material/tooltip/tooltip-animations.ts","../../src/material/tooltip/tooltip-module.ts","../../src/material/paginator/paginator-intl.ts","../../src/material/paginator/paginator.ts","../../src/material/paginator/paginator-module.ts","../../src/material/progress-bar/progress-bar.ts","../../src/material/progress-bar/progress-bar-module.ts","../../src/material/menu/menu.ts","../../src/material/menu/menu-trigger.ts","../../src/material/menu/menu-module.ts","../../src/material/select/select-animations.ts","../../src/material/list/selection-list.ts","../../src/material/list/list-module.ts","../../src/material/menu/menu-animations.ts","../../src/material/menu/menu-content.ts","../../src/material/menu/menu-panel.ts","../../src/material/menu/menu-item.ts","../../src/material/list/list.ts","../../src/material/expansion/expansion-panel-header.ts","../../src/material/expansion/accordion.ts","../../src/material/expansion/expansion-module.ts","../../src/material/grid-list/grid-list-base.ts","../../src/material/grid-list/grid-tile.ts","../../src/material/grid-list/tile-coordinator.ts","../../src/material/grid-list/tile-styler.ts","../../src/material/grid-list/grid-list.ts","../../src/material/grid-list/grid-list-module.ts","../../src/material/icon/icon-registry.ts","../../src/material/icon/icon.ts","../../src/material/icon/icon-module.ts","../../src/material/datepicker/calendar.ts","../../src/material/datepicker/datepicker-animations.ts","../../src/material/datepicker/datepicker.ts","../../src/material/datepicker/datepicker-input.ts","../../src/material/datepicker/datepicker-toggle.ts","../../src/material/datepicker/datepicker-module.ts","../../src/material/divider/divider.ts","../../src/material/divider/divider-module.ts","../../src/material/expansion/accordion-base.ts","../../src/material/expansion/expansion-panel-content.ts","../../src/material/expansion/expansion-panel.ts","../../src/material/datepicker/calendar-body.ts","../../src/material/datepicker/month-view.ts","../../src/material/datepicker/year-view.ts","../../src/material/chips/chip-list.ts","../../src/material/chips/chip-input.ts","../../src/material/chips/chips-module.ts","../../src/material/dialog/dialog-config.ts","../../src/material/dialog/dialog-animations.ts","../../src/material/dialog/dialog-container.ts","../../src/material/dialog/dialog-ref.ts","../../src/material/dialog/dialog.ts","../../src/material/dialog/dialog-content-directives.ts","../../src/material/dialog/dialog-module.ts","../../src/material/input/autosize.ts","../../src/material/input/input-value-accessor.ts","../../src/material/input/input.ts","../../src/material/input/input-module.ts","../../src/material/datepicker/datepicker-intl.ts","../../src/material/card/card.ts","../../src/material/card/card-module.ts","../../src/material/checkbox/checkbox-config.ts","../../src/material/checkbox/checkbox.ts","../../src/material/checkbox/checkbox-required-validator.ts","../../src/material/checkbox/checkbox-module.ts","../../src/material/chips/chip.ts","../../src/material/chips/chip-default-options.ts","../../src/material/button/button.ts","../../src/material/button/button-module.ts","../../src/material/button-toggle/button-toggle.ts","../../src/material/button-toggle/button-toggle-module.ts","../../src/material/form-field/form-field.ts","../../src/material/form-field/form-field-module.ts","../../src/material/autocomplete/autocomplete.ts","../../src/material/autocomplete/autocomplete-origin.ts","../../src/material/autocomplete/autocomplete-module.ts","../../src/material/badge/badge.ts","../../src/material/badge/badge-module.ts","../../src/material/bottom-sheet/bottom-sheet-config.ts","../../src/material/bottom-sheet/bottom-sheet-animations.ts","../../src/material/bottom-sheet/bottom-sheet-container.ts","../../src/material/bottom-sheet/bottom-sheet-module.ts","../../src/material/bottom-sheet/bottom-sheet-ref.ts","../../src/material/bottom-sheet/bottom-sheet.ts","../../src/material/core/option/option.ts","../../src/material/core/option/index.ts","../../src/material/core/label/label-options.ts","../../src/material/form-field/error.ts","../../src/material/form-field/form-field-animations.ts","../../src/material/form-field/form-field-control.ts","../../src/material/form-field/hint.ts","../../src/material/form-field/label.ts","../../src/material/form-field/placeholder.ts","../../src/material/form-field/prefix.ts","../../src/material/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/material/core/common-behaviors/common-module.ts","../../src/material/core/common-behaviors/disabled.ts","../../src/material/core/common-behaviors/color.ts","../../src/material/core/common-behaviors/disable-ripple.ts","../../src/material/core/common-behaviors/tabindex.ts","../../src/material/core/common-behaviors/error-state.ts","../../src/material/core/common-behaviors/initialized.ts","../../src/material/core/datetime/date-adapter.ts","../../src/material/core/datetime/native-date-adapter.ts","../../src/material/core/line/line.ts","../../src/material/core/ripple/ripple-renderer.ts","../../src/material/form-field/form-field-errors.ts","../../src/material/input/input-errors.ts","../../src/material/datepicker/datepicker-errors.ts","../../src/material/menu/menu-errors.ts","../../src/material/select/select-errors.ts","../../src/material/sort/sort-errors.ts","../../src/material/core/version.ts","../../src/material/core/animation/animation.ts","../../src/material/core/datetime/date-formats.ts","../../src/material/core/datetime/native-date-formats.ts","../../src/material/core/datetime/index.ts","../../src/material/core/error/error-options.ts","../../src/material/core/gestures/gesture-config.ts","../../src/material/core/ripple/ripple-ref.ts","../../src/material/core/ripple/ripple.ts","../../src/material/core/ripple/index.ts","../../src/material/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/material/core/selection/index.ts","../../src/material/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nclass MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  Inject,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\n\nimport {MatTreeNodeOutlet} from './outlet';\n\nconst _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nconst _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T> implements\n    AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n  @Input('matNestedTreeNode') node: T;\n\n  /** The children node placeholder. */\n  @ContentChildren(MatTreeNodeOutlet, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet, {static: true}) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private _treeControl: FlatTreeControl<F>,\n              private _treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this._treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ConnectedPosition,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnChanges, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n   * will render the panel underneath the trigger if there is enough space for it to fit in\n   * the viewport, otherwise the panel will be shown above it. If the position is set to\n   * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n   * whether it fits completely in the viewport.\n   */\n  @Input('matAutocompletePosition') position: 'auto' | 'above' | 'below' = 'auto';\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['position'] && this._positionStrategy) {\n      this._setStrategyPositions(this._positionStrategy);\n\n      if (this.panelOpen) {\n        this._overlayRef!.updatePosition();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    return merge(\n      fromEvent(this._document, 'click') as Observable<MouseEvent>,\n      fromEvent(this._document, 'touchend') as Observable<TouchEvent>\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && this._document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n        .pipe(\n            // create a new stream of panelClosingActions, replacing any previous streams\n            // that were created, and flatten it so our stream only emits closing events...\n            switchMap(() => {\n              const wasOpen = this.panelOpen;\n              this._resetActiveItem();\n              this.autocomplete._setVisibility();\n\n              if (this.panelOpen) {\n                this._overlayRef!.updatePosition();\n\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                  this.autocomplete.opened.emit();\n                }\n              }\n\n              return this.panelClosingActions;\n            }),\n            // when the first closing event occurs...\n            take(1))\n        // set the value, close the panel, and complete.\n        .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the trigger, panel width and direction, in case anything has changed.\n      this._positionStrategy.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false);\n\n    this._setStrategyPositions(strategy);\n    this._positionStrategy = strategy;\n    return strategy;\n  }\n\n  /** Sets the positions on a position strategy based on the directive's input state. */\n  private _setStrategyPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const belowPosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    };\n    const abovePosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n\n      // The overlay edge connected to the trigger should have squared corners, while\n      // the opposite end has rounded corners. We apply a CSS class to swap the\n      // border-radius based on the overlay position.\n      panelClass: 'mat-autocomplete-panel-above'\n    };\n\n    let positions: ConnectedPosition[];\n\n    if (this.position === 'above') {\n      positions = [abovePosition];\n    } else if (this.position === 'below') {\n      positions = [belowPosition];\n    } else {\n      positions = [belowPosition, abovePosition];\n    }\n\n    positionStrategy.withPositions(positions);\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nconst _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger', {static: false}) trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay, {static: false}) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger, {static: false}) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    const options = this.options;\n\n    if (options) {\n      return options.changes.pipe(\n        startWith(options),\n        switchMap(() => merge(...options.map(option => option.onSelectionChange)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this._panelOpen) {\n          this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      const selectedOption = this.selected;\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {\n        // We set a duration on the live announcement, because we want the live element to be\n        // cleared after a while so that users can't navigate to it using the arrow keys.\n        this._liveAnnouncer.announce((selectedOption as MatOption).viewValue, 10000);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {HAMMER_LOADER, HammerLoader} from '@angular/platform-browser';\nimport {Observable, Subject} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\n\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy, OnInit {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Setup styling-specific things\n   */\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE && !hasModifierKey(e)) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const scrollableAncestors =\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n                         .flexibleConnectedTo(this._elementRef)\n                         .withTransformOriginOn('.mat-tooltip')\n                         .withFlexibleDimensions(false)\n                         .withViewportMargin(8)\n                         .withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nclass MatTabBase {}\nconst _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel, {static: false}) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef, static: true})\n  _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef, {static: true}) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective, {static: false}) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (_dir) {\n      this._dirChangeSubscription = _dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nclass MatTabLabelWrapperBase {}\nconst _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nclass MatTabHeaderBase {}\nconst _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('nextPaginator', {static: false}) _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator', {static: false}) _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _platform: Platform) {\n    super();\n\n    // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n    _ngZone.runOutsideAngular(() => {\n      fromEvent(_elementRef.nativeElement, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent;\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      this._ngZone.run(() => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/components/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    if (platform.TRIDENT || platform.EDGE) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nclass MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper', {static: false}) _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader', {static: false}) _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nclass MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nclass MatTabLinkBase {}\nconst _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(\n      private _tabNavBar: MatTabNav, public _elementRef: ElementRef, ngZone: NgZone,\n      platform: Platform,\n      @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalRippleOptions: RippleGlobalOptions|null,\n      @Attribute('tabindex') tabIndex: string, private _focusMonitor: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n    _focusMonitor.monitor(_elementRef);\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nclass MatSortHeaderBase {}\nconst _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  /** Whether the ripple should be disabled. */\n  @Input() disableRipple: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the step header. */\n  focus() {\n    this._focusMonitor.focusVia(this._elementRef, 'program');\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  _getDefaultTextForState(state: StepState): string {\n    if (state == 'number') {\n      return `${this.index + 1}`;\n    }\n    if (state == 'edit') {\n      return 'create';\n    }\n    if (state == 'error') {\n      return 'warning';\n    }\n    return state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel, {static: false}) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({selector: '[matStepper]', providers: [{provide: CdkStepper, useExisting: MatStepper}]})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether ripples should be disabled for the step headers. */\n  @Input() disableRipple: boolean;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatHorizontalStepper},\n    {provide: CdkStepper, useExisting: MatHorizontalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatVerticalStepper},\n    {provide: CdkStepper, useExisting: MatVerticalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {Directive} from '@angular/core';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperNext extends CdkStepperNext {\n}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  providers: [{provide: CdkTable, useExisting: MatTable}],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkFooterRow,\n  CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef\n} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow {\n}\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextColumn} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-text-column',\n  template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  // Change detection is intentionally not set to OnPush. This component's template will be provided\n  // to the table to be inserted into its view. This is problematic when change detection runs since\n  // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n  // mean's the template in the table's view will not have the updated value (and in fact will cause\n  // an ExpressionChangedAfterItHasBeenCheckedError).\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTextColumn<T> extends CdkTextColumn<T> {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {MatTextColumn} from './text-column';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n\n  MatTextColumn,\n];\n\n@NgModule({\n  imports: [\n    CdkTableModule,\n    CommonModule,\n    MatCommonModule,\n  ],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge(this._sort.sortChange, this._sort.initialized) as Observable<Sort|void> :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge(\n          this._paginator.page,\n          this._internalPageChanges,\n          this._paginator.initialized\n        ) as Observable<PageEvent|void> :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nclass MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper', {static: false}) private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nclass MatSortBase {}\nconst _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  HostListener,\n  HostBinding,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n  // metadata is not inherited by child classes, instead the host binding data is defined in a way\n  // that can be inherited.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostBinding('@transform')\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        (fromEvent(this._elementRef.nativeElement, 'keydown') as Observable<KeyboardEvent>).pipe(\n            filter(event => {\n              return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            }),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n            event.preventDefault();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._modeChanged.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.start', ['$event'])\n  _animationStartListener(event: AnimationEvent) {\n    this._animationStarted.next(event);\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.done', ['$event'])\n  _animationDoneListener(event: AnimationEvent) {\n    this._animationEnd.next(event);\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent, {static: false}) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent, {static: false}) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this.updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    viewportRuler.change()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this.updateContentMargins());\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this.updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this.updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        const width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        const width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this.updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this.updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent, {static: false}) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    // Needs to be `-1` so it can still receive programmatic focus.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n                                                                        ControlValueAccessor,\n                                                                        CanDisable, CanColor,\n                                                                        HasTabIndex,\n                                                                        CanDisableRipple {\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer', {static: false}) _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar', {static: false}) _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this._onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this._onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nclass MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /**\n   * Element to which we should add the generated style tags for the indeterminate animation.\n   * For most elements this is the document, but for the ones in the Shadow DOM we need to\n   * use the shadow root.\n   */\n  private _styleRoot: Node;\n\n  /**\n   * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n   * We need to keep track of which elements the diameters were attached to, because for\n   * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n   * than the document head.\n   */\n  private static _diameters = new WeakMap<Node, Set<number>>();\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation) {\n      const trackedDiameters = MatProgressSpinner._diameters;\n      const diametersForElement = trackedDiameters.get(this._styleRoot);\n\n      if (!diametersForElement || !diametersForElement.has(this._diameter)) {\n        this._attachStyleNode();\n      }\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n\n    const trackedDiameters = MatProgressSpinner._diameters;\n\n    // The base size is already inserted via the component's structural styles. We still\n    // need to track it so we don't end up adding the same styles again.\n    if (!trackedDiameters.has(_document.head)) {\n      trackedDiameters.set(_document.head, new Set<number>([BASE_SIZE]));\n    }\n\n    this._styleRoot = _getShadowRoot(_elementRef.nativeElement, _document) || _document.head;\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n    this._noopAnimations = animationMode === 'NoopAnimations' &&\n        (!!defaults && !defaults._forceAnimations);\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    const styleTag: HTMLStyleElement = this._document.createElement('style');\n    const styleRoot = this._styleRoot;\n    const currentDiameter = this._diameter;\n    const diameters = MatProgressSpinner._diameters;\n    let diametersForElement = diameters.get(styleRoot);\n\n    styleTag.setAttribute('mat-spinner-animation', currentDiameter + '');\n    styleTag.textContent = this._getAnimationText();\n    styleRoot.appendChild(styleTag);\n\n    if (!diametersForElement) {\n      diametersForElement = new Set<number>();\n      diameters.set(styleRoot, diametersForElement);\n    }\n\n    diametersForElement.add(currentDiameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef<HTMLElement>, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n\n\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nexport function _getShadowRoot(element: HTMLElement, _document: Document): Node | null {\n  // TODO(crisbeto): see whether we should move this into the CDK\n  // feature detection utilities once #15616 gets merged in.\n  if (typeof window !== 'undefined') {\n    const head = _document.head;\n\n    // Check whether the browser supports Shadow DOM.\n    if (head && ((head as any).createShadowRoot || head.attachShadow)) {\n      const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n      // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n      // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n      if (rootNode instanceof (window as any).ShadowRoot) {\n        return rootNode;\n      }\n    }\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisableRipple,\n  mixinTabIndex,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Theme color for all of the radio buttons in the group. */\n  @Input() color: ThemePalette;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase:\n    CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-accent]': 'color === \"accent\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /** Theme color of the radio button. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color || (this.radioGroup && this.radioGroup.color) || 'accent';\n  }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nclass MatPaginatorBase {}\nconst _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription, Observable} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nclass MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nconst _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': '_isNoopAnimation',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this._emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar', {static: false}) _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        const element = this._primaryValueBar.nativeElement;\n\n        this._animationEndSubscription =\n            (fromEvent(element, 'transitionend') as Observable<TransitionEvent>)\n              .pipe(filter(((e: TransitionEvent) => e.target === element)))\n              .subscribe(() => this._ngZone.run(() => this._emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private _emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ESCAPE,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  UP_ARROW,\n  HOME,\n  END,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {AnimationEvent} from '@angular/animations';\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n/** Base class with all of the `MatMenu` functionality. */\n// tslint:disable-next-line:class-name\nexport class _MatMenuBase implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit,\n  OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: false}) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent, {static: false}) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this.closed.emit('keydown');\n        }\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n\n/** @docs-private We show the \"_MatMenu\" class as \"MatMenu\" in the docs. */\nexport class MatMenu extends _MatMenuBase {}\n\n// Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to\n// extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles\n// to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for\n// queries and DI to work correctly, while still not referencing the actual menu class.\n// Class responsibility is split up as follows:\n// * _MatMenuBase - provides all the functionality without any of the Angular metadata.\n// * MatMenu - keeps the same name symbol name as the current menu and\n// is used as a provider for DI and query purposes.\n// * _MatMenu - the actual menu component implementation with the Angular metadata that should\n// be tree shaken away for MDC.\n\n/** @docs-public MatMenu */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu},\n    {provide: MatMenu, useExisting: _MatMenu}\n  ]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenu extends MatMenu {\n\n  constructor(elementRef: ElementRef<HTMLElement>, ngZone: NgZone,\n      @Inject(MAT_MENU_DEFAULT_OPTIONS) defaultOptions: MatMenuDefaultOptions) {\n    super(elementRef, ngZone, defaultOptions);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   */\n  @Input('matMenuTriggerRestoreFocus') restoreFocus: boolean = true;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._menuCloseSubscription.unsubscribe();\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe({\n            next: () => menu.lazyContent!.detach(),\n            // No matter whether the content got re-attached, reset the menu.\n            complete: () => this._resetMenu()\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (this.restoreFocus) {\n      if (!this._openedBy) {\n        // Note that the focus style will show up both for `program` and\n        // `keyboard` so we don't have to specify which one it is.\n        this.focus();\n      } else if (!this.triggersSubmenu()) {\n        this.focus(this._openedBy);\n      }\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {_MatMenu} from './menu';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\n@NgModule({\n  exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenuDirectivesModule {}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    _MatMenuDirectivesModule,\n  ],\n  exports: [_MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n  declarations: [_MatMenu, MatMenuItem],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nclass MatSelectionListBase {}\nconst _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nclass MatListOptionBase {}\nconst _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme. The accent theme palette is the default and doesn't need to be set.\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text', {static: false}) _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => {\n        this.selected = false;\n      });\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  /** Whether the list has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes['disableRipple'];\n    const colorChanges = changes['color'];\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the selection list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    // Stop reporting value changes after the list has been destroyed. This avoids\n    // cases where the list might wrongly reset its value once it is removed, but\n    // the form control is still live.\n    if (this.options && !this._destroyed) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content, .mat-mdc-menu-content', animate('100ms linear', style({\n        opacity: 1\n      }))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n  HostListener,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nclass MatMenuItemBase {}\nconst _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('click', ['$event'])\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('mouseenter')\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nclass MatListBase {}\nconst _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nclass MatListItemBase {}\nconst _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list') {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n\n    if (nodeName === 'mat-list') {\n      return 'list';\n    }\n\n    if (nodeName === 'mat-action-list') {\n      return 'action-list';\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    if (this._list) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!changes['hideToggle'])) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => !!(changes['hideToggle'] || changes['disabled']))))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END, hasModifierKey} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      if (!hasModifierKey(event)) {\n        manager.setFirstItemActive();\n        event.preventDefault();\n      }\n    } else if (keyCode === END) {\n      if (!hasModifierKey(event)) {\n        manager.setLastItemActive();\n        event.preventDefault();\n      }\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    // Use the `id=\"iconName\"` syntax in order to escape special\n    // characters in the ID (versus using the #iconName syntax).\n    const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nclass MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatIconMixinBase: CanColorCtor & typeof MatIconBase = mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    const svgIconChanges = changes['svgIcon'];\n\n    if (svgIconChanges) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else if (svgIconChanges.previousValue) {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView, {static: false}) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView, {static: false}) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView, {static: false}) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nclass MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nconst _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar, {static: false}) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(event => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.close();\n    });\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    'aria-haspopup': 'dialog',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon, {static: false}) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button', {static: false}) _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  private _document: Document;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent, {static: false}) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body', {static: false}) _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nclass MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  }) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this.chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n        this._keyManager.setActiveItem(newChipIndex);\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /**\n   * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the list from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    if (this._tabIndex !== -1) {\n      this._tabIndex = -1;\n\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's state with the individual chips. */\n  private _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey, TAB} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n    // want to do this when going backwards, because focus should go back to the first chip.\n    if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n      this._chipList._allowFocusEscape();\n    }\n\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => {\n        return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n      }))\n      .subscribe(event => {\n        event.preventDefault();\n        this.close();\n      });\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  // TODO (jelbourn): tighten the typing right-hand side of this expression.\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined))) as Observable<any>;\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nclass MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n@NgModule({\n  exports: [MatCheckboxRequiredValidator],\n  declarations: [MatCheckboxRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatCheckboxRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    CommonModule, MatRippleModule, MatCommonModule, ObserversModule,\n    _MatCheckboxRequiredValidatorModule\n  ],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatChipMixinBase: CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar, {static: false}) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon, {static: false}) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove), {static: false}) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n  }\n\n  _addHostClassName() {\n    const basicChipAttrName = 'mat-basic-chip';\n    const element = this._elementRef.nativeElement as HTMLElement;\n\n    if (element.hasAttribute(basicChipAttrName) ||\n        element.tagName.toLowerCase() === basicChipAttrName) {\n      element.classList.add(basicChipAttrName);\n      return;\n    } else {\n      element.classList.add('mat-standard-chip');\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    const parentChip = this._parentChip;\n\n    if (parentChip.removable && !parentChip.disabled) {\n      parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nclass MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatButtonMixinBase: CanDisableRippleCtor & CanDisableCtor & CanColorCtor &\n    typeof MatButtonBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Material design anchor button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string) {\n    super(elementRef, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   * @param deferEvents Whether to defer emitting the change events.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle,\n                    select: boolean,\n                    isUserInput = false,\n                    deferEvents = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n    // the side-effect is that we may end up updating the model value out of sequence in others\n    // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n    if (deferEvents) {\n      Promise.resolve(() => this._updateModelValue(isUserInput));\n    } else {\n      this._updateModelValue(isUserInput);\n    }\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n\n  /** Syncs up the group's value with the model and emits the change event. */\n  private _updateModelValue(isUserInput: boolean) {\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nclass MatButtonToggleBase {}\nconst _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '[attr.name]': 'null',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button', {static: false}) _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      group._syncButtonToggle(this, false, false, true);\n    }\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nclass MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nconst _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._outlineGapCalculationNeededOnStable = true;\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline', {static: false}) underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer', {static: true}) _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer', {static: false}) _inputContainerRef: ElementRef;\n  @ViewChild('label', {static: false}) private _label: ElementRef;\n\n  @ContentChild(MatFormFieldControl, {static: false}) _controlNonStatic: MatFormFieldControl<any>;\n  @ContentChild(MatFormFieldControl, {static: true}) _controlStatic: MatFormFieldControl<any>;\n  get _control() {\n    // TODO(crisbeto): we need this hacky workaround in order to support both Ivy\n    // and ViewEngine. We should clean this up once Ivy is the default renderer.\n    return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n  }\n  set _control(value) {\n    this._explicitFormFieldControl = value;\n  }\n  private _explicitFormFieldControl: MatFormFieldControl<any>;\n\n  @ContentChild(MatLabel, {static: false}) _labelChildNonStatic: MatLabel;\n  @ContentChild(MatLabel, {static: true}) _labelChildStatic: MatLabel;\n  get _labelChild() {\n    return this._labelChildNonStatic || this._labelChildStatic;\n  }\n\n  @ContentChild(MatPlaceholder, {static: false}) _placeholderChild: MatPlaceholder;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaults:\n          MatFormFieldDefaultOptions, private _platform: Platform, private _ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Note that we have to run outside of the `NgZone` explicitly,\n    // in order to avoid throwing users into an infinite loop\n    // if `zone-patch-rxjs` is included.\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    });\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._outlineGapCalculationNeededOnStable = true;\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (!this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {}\nconst _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  // The @ViewChild query for TemplateRef here needs to be static because some code paths\n  // lead to the overlay being created before change detection has finished for this component.\n  // Notably, another component may trigger `focus` on the autocomplete-trigger.\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, {descendants: true}) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      this._classList = value.split(' ').reduce((classList, className) => {\n        classList[className.trim()] = true;\n        return classList;\n      }, {} as {[key: string]: boolean});\n    } else {\n      this._classList = {};\n    }\n\n    this._setVisibilityClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n  private _setVisibilityClasses(classList: {[key: string]: boolean}) {\n    classList['mat-autocomplete-visible'] = this.showPanel;\n    classList['mat-autocomplete-hidden'] = !this.showPanel;\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n  isDevMode,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled, ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nclass MatBadgeBase {}\n\nconst _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, OnChanges, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge') content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement | undefined;\n\n  constructor(\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      private _renderer: Renderer2,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n      super();\n\n      if (isDevMode()) {\n        const nativeElement = _elementRef.nativeElement;\n        if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n          throw Error('matBadge must be attached to an element node.');\n        }\n      }\n    }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const contentChange = changes['content'];\n\n    if (contentChange) {\n      const value = contentChange.currentValue;\n      this._hasContent = value != null && `${value}`.trim().length > 0;\n      this._updateTextContent();\n    }\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      if (this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /**\n   * Gets the element into which the badge's content is being rendered.\n   * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n   */\n  getBadgeElement(): HTMLElement | undefined {\n    return this._badgeElement;\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._renderer.createElement('span');\n    const activeClass = 'mat-badge-active';\n    const contentClass = 'mat-badge-content';\n\n    // Clear any existing badges which may have persisted from a server-side render.\n    this._clearExistingBadges(contentClass);\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add(contentClass);\n    badgeElement.textContent = this.content;\n\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  private _clearExistingBadges(cssClass: string) {\n    const element = this._elementRef.nativeElement;\n    let childCount = element.children.length;\n\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n    while (childCount--) {\n      const currentChild = element.children[childCount];\n\n      if (currentChild.classList.contains(cssClass)) {\n        element.removeChild(currentChild);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\nimport {InjectionToken, ViewContainerRef} from '@angular/core';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the bottom sheet. */\n  scrollStrategy?: ScrollStrategy;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible') {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    if (this.bottomSheetConfig.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged\n        .pipe(filter(event => event.phaseName === 'done' && event.toState === 'hidden'), take(1))\n        .subscribe(() => {\n          _overlayRef.dispose();\n        });\n\n    _overlayRef.detachments().pipe(take(1)).subscribe(() => {\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(event => {\n      if (!this.disableClose &&\n        (event.type !== 'keydown' || !hasModifierKey(event as KeyboardEvent))) {\n        event.preventDefault();\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: config.scrollStrategy || this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position().global().centerHorizontally().bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': '_getAriaSelected()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /**\n   * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\n   * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\n   * attributes adds a significant amount of noise to screen-reader users without providing useful\n   * information.\n   */\n  _getAriaSelected(): boolean|null {\n    return this.selected || (this.multiple ? false : null);\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nlet SUPPORTS_INTL_API: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\n} catch {\n  SUPPORTS_INTL_API = false;\n}\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this._onMousedown)\n        .set('mouseup', this._onPointerUp)\n        .set('mouseleave', this._onPointerUp)\n\n        .set('touchstart', this._onTouchStart)\n        .set('touchend', this._onPointerUp)\n        .set('touchcancel', this._onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this._runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this._runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private _onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private _onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private _onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private _runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('8.0.1');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nclass MatOptgroupBase { }\nconst _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["node","classList","contains","filter","nodeType","_this","_document","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","type","Component","args","selector","exportAs","template","styles","inputs","host","class","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","undefined","decorators","Inject","DOCUMENT","MatToolbar","propDecorators","MatToolbarModule","NgModule","imports","MatCommonModule","exports","MatToolbarRow","declarations","MatTreeNodeOutlet","viewContainer","_node","this","Directive","ViewContainerRef","CDK_TREE_NODE_OUTLET_NODE","Optional","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_super","_elementRef","_tree","tabIndex","call","role","Number","tslib_1.__extends","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","String","Attribute","Input","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","IterableDiffers","nodeOutlet","ContentChildren","descendants","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","MatTreeNodeToggle","apply","arguments","recursive","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeModule","CdkTreeModule","CommonModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","_treeControl","_treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","SELECT_PANEL_PADDING_X","MatTab","_implicitContent","ViewChild","TemplateRef","static","textLabel","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","style","transform","minHeight","transition","animate","MatTabBodyPortal","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","ngOnInit","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","Subject","_onCentering","EventEmitter","_onCentered","animationDuration","change","dir","_computePositionAnimationState","markForCheck","distinctUntilChanged","x","y","fromState","toState","event","emit","position","_positionIndex","origin","_computePositionFromOrigin","complete","_onTranslateTabStarted","nativeElement","clientHeight","_getLayoutDirection","animations","ChangeDetectorRef","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_ngZone","_platform","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_selectedIndex","selectFocusedIndex","indexFocused","runOutsideAngular","fromEvent","takeUntil","_stopInterval","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","newFocusIndex","_setTabFocus","ngAfterViewInit","_previousPaginator","_handlePaginatorPress","_nextPaginator","_onContentChanges","_currentTextContent","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","platform","translateX","_tabList","Math","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","timer","_a","maxScrollDistance","distance","max","min","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","NgZone","Platform","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","InjectionToken","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_animationDuration","test","_backgroundColor","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","isActive","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","element","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","_MatTabLinkMixinBase","MatTabLink","_tabNavBar","ngZone","globalRippleOptions","_focusMonitor","_tabLinkRipple","setupTriggerEvents","rippleConfig","parseInt","monitor","get","_isActive","enumerable","configurable","stopMonitoring","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","MatTabsModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabLabel","MatTabContent","MatInkBar","MatToolbarBase","_MatToolbarMixinBase","document","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","from","childNodes","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","allowChildren","MatSort","MatSortHeader","start","disableClear","MatSortModule","MAT_SORT_HEADER_INTL_PROVIDER","MatStepLabel","CdkStepLabel","MatStepperIntl","optionalLabel","Injectable","providedIn","MAT_STEPPER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_intl","_intlSubscription","focusVia","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","optional","_getDefaultTextForState","errorMessage","iconOverrides","selected","disableRipple","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStepperIcon","templateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","CdkStepper","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","Default","CdkFooterRow","MatRow","CdkRow","MatTextColumn","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","newPageIndex","_MAT_INK_BAR_POSITIONER","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","_contentPortal","ngOnChanges","hasOwnProperty","TemplatePortal","_explicitContent","MatSlider","MatSliderChange","source","_calculatePercentage","_calculateValue","percentage","_clamp","_getSliderDimensions","_sliderWrapper","getBoundingClientRect","_focusHostElement","_blurHostElement","blur","writeValue","registerOnChange","fn","_controlValueAccessorChangeFn","registerOnTouched","onTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(mousedown)","(keydown)","(keyup)","(mouseenter)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","step","thumbLabel","tickInterval","displayWith","vertical","input","valueChange","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","keyframes","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","_renderArrow","(click)","(longpress)","(mouseleave)","_drawers","_isDrawerOpen","_start","_end","updateContentMargins","_doCheckSubject","debounceTime","MatDrawerContainer","_contentMarginChanges","drawer","close","_left","mode","_width","_right","opened","_contentMargins","ngDoCheck","_element","openedChange","_setContainerClass","onPositionChanged","_validateDrawers","throwMatDuplicatedDrawerError","_onBackdropClicked","backdropClick","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","[class.mat-drawer-container-explicit-backdrop]","MatDrawer","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","matDrawerAnimations","transformDrawer","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","_onChange","_","_onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_emitChangeEvent","_onInputClick","toggle","_getDragPercentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_roundToDecimal","toString","split","pop","parseFloat","toFixed","invert","percent","_isMinValue","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_updateTickIntervalPercent","_onMousedown","button","oldValue","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","closestValue","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","_strokeCircumference","_fallbackAnimation","MatProgressSpinner","strokeWidth","diameter","_attachStyleNode","styleTag","createElement","styleRoot","_styleRoot","currentDiameter","_diameter","diameters","_diameters","diametersForElement","setAttribute","_getAnimationText","appendChild","Set","INDETERMINATE_ANIMATION_TEMPLATE","replace","[style.width.px]","[style.height.px]","[attr.mode]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatSpinner","animationMode","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","_markForCheck","isAlreadySelected","MatRadioButton","color","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_color","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","_animationEnd","_opened","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","HostBinding","_openedStream","openedStart","_closedStream","closedStart","_animationStartListener","HostListener","_animationDoneListener","viewportRuler","_autosize","defaultAutosize","_backdropOverride","sortComparator","selectionChange","MatSelect","MatSelectModule","MatOptionModule","MatFormFieldModule","MatSelectTrigger","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","elementStyle","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","removeEventListener","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","e","ESCAPE","_handleTouchend","touchendHideDelay","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","_emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","trackedDiameters","head","_getShadowRoot","_noopAnimations","_forceAnimations","animationClass","_strokeWidth","viewBox","_circleRadius","PI","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenu","_MatMenu","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_menu","reason","_destroyMenu","_checkMenu","_handleHover","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetAnimation","_attached","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","_MatMenuDirectivesModule","MatMenuContent","MatMenuModule","matSelectAnimations","transformPanelWrap","transformPanel","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","options","switchMap","option","onSelectionChange","onStable","o","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","_triggerRect","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","previouslySelectedOption","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatListOption","_setSelected","selectionList","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","_lines","MatLine","_text","checkboxPosition","_markOptionsForCheck","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","item","disableRippleChanges","colorChanges","firstChange","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","_getSelectedOptionValues","values","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_MatMenuBase","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","defaultOptions","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","_hasFocus","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_handleBlur","MatExpansionPanelHeader","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_hideToggle","displayMode","_headers","_handleHeaderKeydown","_handleHeaderFocus","header","MAT_ACCORDION","hideToggle","CdkAccordion","MatExpansionModule","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIconChanges","svgIcon","_setSvgElement","log","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","minDate","maxDate","dateFilter","dateClass","selectedChange","yearSelected","monthSelected","_userSelection","monthView","MatMonthView","yearView","MatYearView","multiYearView","MatMultiYearView","MatCalendar","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","_setColor","_createPopup","datepicker","getConnectedOverlayOrigin","componentInstance","MatDialog","DateAdapter","calendarHeaderComponent","startAt","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendarBody","MatCalendarHeader","MatDatepickerIntl","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","accordion","_uniqueSelectionDispatcher","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","_hasSpacing","expanded","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","useValue","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","accordionHideToggleChange","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","view","_getCurrentViewComponent","headerComponent","chips","chip","MatChipList","_syncChipsState","_chipListMultiple","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","TAB","_allowFocusEscape","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","ariaLabelledBy","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","MatInputModule","TextFieldModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","MatCardTitleGroup","MatCardModule","MatCard","MatCardHeader","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","ripple","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","_MatCheckboxRequiredValidatorModule","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","MatButton","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","deferEvents","_updateModelValue","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","[attr.name]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","MAT_LABEL_GLOBAL_OPTIONS","MAT_FORM_FIELD_DEFAULT_OPTIONS","hideRequiredMarker","hintLabel","floatLabel","underlineRef","_connectionContainerRef","_inputContainerRef","_controlStatic","_labelChildNonStatic","MatLabel","_labelChildStatic","_placeholderChild","MatPlaceholder","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibilityClasses","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_positionStrategy","_setStrategyPositions","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","wasOpen","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","withPush","belowPosition","abovePosition","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","[attr.aria-haspopup]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_overlap","val","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","contentChange","_updateTextContent","description","destroyNode","getBadgeElement","_createBadgeElement","_clearExistingBadges","oldDescription","colorPalette","currentChild","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_getAriaSelected","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_hideRequiredMarker","_processHints","_explicitFormFieldControl","_controlNonStatic","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","createShadowRoot","attachShadow","rootNode","getRootNode","sortOrder","SUPPORTS_INTL_API","setPrototypeOf","__proto__","__assign","assign","s","n","VERSION","Version","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","_onTouchStart","touches","changedTouches","_onPointerUp","terminateOnPointerUp","persistent","_containerElement","_containerRect","animationConfig","animation","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","_runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}